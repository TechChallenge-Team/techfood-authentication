# .github/workflows/deploy-lambda.yml

name: Deploy .NET Lambda to AWS

on:
  push:
    branches:
      - main
      - "feature/*"
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1
  DOTNET_PROJECT_PATH: src/TechFood.Authentication/TechFood.Authentication.csproj
  DOTNET_PROJECT_LOCATION: src/TechFood.Authentication
  LAMBDA_HANDLER: "TechFood.Authentication"
  OUTPUT_PACKAGE_NAME: TechFood.Authentication.zip

jobs:
  build-and-deploy-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore ${{ env.DOTNET_PROJECT_PATH }}

      - name: Build project
        run: dotnet build --configuration Release ${{ env.DOTNET_PROJECT_PATH }}

      - name: Install Amazon Lambda Tools
        run: |
          dotnet tool install -g Amazon.Lambda.Tools
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Publish Lambda package
        run: |
          dotnet lambda package --configuration Release --project-location ${{ env.DOTNET_PROJECT_LOCATION }} --output-package bin/Release/${{ env.OUTPUT_PACKAGE_NAME }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_TESTE_LEO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_TESTE_LEO }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_TESTE_LEO }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download outputs.json
        run: |
          aws s3 cp s3://techfood-ts-bucket/db-outputs.json db-outputs.json

      - name: Parse outputs.json
        id: tf_outputs
        run: |
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value' db-outputs.json)
          RDS_ENDPOINT="${RDS_ENDPOINT//:1433/,1433}"

          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Upload package to S3
        run: |
          BUCKET=${{ secrets.AUTH_BUCKET }}
          KEY="techfood/auth/${{ env.OUTPUT_PACKAGE_NAME }}"
          echo "Uploading to s3://$BUCKET/$KEY"
          aws s3 cp bin/Release/${{ env.OUTPUT_PACKAGE_NAME }} s3://$BUCKET/$KEY

      - name: Create or Update Lambda function
        run: |
          FUNC_NAME=${{ vars.AUTH_FUNCTION_NAME }}
          BUCKET=${{ secrets.AUTH_BUCKET }}
          KEY="techfood/auth/${{ env.OUTPUT_PACKAGE_NAME }}"
          ROLE_ARN=${{ vars.EKS_LAB_ROLE_ARN }} # <= NOVO SEGREDO NECESSÁRIO!
          HANDLER="${{ env.LAMBDA_HANDLER }}"
          RUNTIME="dotnet8"
          RDS_ENDPOINT="${{ steps.tf_outputs.outputs.rds_endpoint }}"

          # Verifica se o segredo do Role ARN foi configurado
          if [ -z "$ROLE_ARN" ]; then
            echo "ERRO: O segredo EKS_LAB_ROLE_ARN não está configurado no repositório."
            echo "Por favor, crie um IAM Role para a função Lambda e adicione o ARN como um segredo."
            exit 1
          fi

          echo "Checking if function $FUNC_NAME exists..."
          echo "RDS Endpoint: $RDS_ENDPOINT"
          set -e

          # Construir a connection string para SQL Server
          CONNECTION_STRING="Server=$RDS_ENDPOINT;Database=techfood;User Id=${{ secrets.DB_USERNAME }};Password=${{ secrets.DB_PASSWORD }};TrustServerCertificate=true;"

          if aws lambda get-function --function-name "$FUNC_NAME" > /dev/null 2>&1; then
            echo "Function exists. Updating function code..."
            aws lambda update-function-code \
              --function-name "$FUNC_NAME" \
              --s3-bucket "$BUCKET" \
              --s3-key "$KEY" \
              --publish
            
            echo "Updating function environment variables..."
            aws lambda update-function-configuration \
              --function-name "$FUNC_NAME" \
              --environment "Variables={ConnectionStrings__DataBaseConection=$CONNECTION_STRING}"
          else
            echo "Function does not exist. Creating new function..."
            aws lambda create-function \
              --function-name "$FUNC_NAME" \
              --runtime $RUNTIME \
              --role "$ROLE_ARN" \
              --handler "$HANDLER" \
              --code "S3Bucket=$BUCKET,S3Key=$KEY" \
              --timeout 30 \
              --memory-size 512 \
              --environment "Variables={ConnectionStrings__DataBaseConection=$CONNECTION_STRING}" \
              --publish
          fi

      - name: Deployment summary
        run: |
          echo "Lambda function: ${{ secrets.AUTH_FUNCTION_NAME }}"
          echo "Lambda ARN: ${{ secrets.AUTH_FUNCTION_ARN }}" # Este segredo pode ser preenchido com o output do Terraform
          echo "API URL: ${{ secrets.AUTH_API_URL }}" # Este segredo pode ser preenchido com o output do Terraform
